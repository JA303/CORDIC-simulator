using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using System;

public class LookUpTable : MonoBehaviour
{
    [SerializeField] private Line lineMu;

    [SerializeField] private Line lineEi;

    [Header("UI")]
    [SerializeField] private TextMeshPro text;

    private int mu;

    private void ReadInputs()
    {
        mu = (int)lineMu.Value;
    }

    public void Propagate(uint i)
    {
        ReadInputs();
        if (mu == -1)
            lineEi.SetValue(invertTanh[i]);
        else if (mu == 0)
            lineEi.SetValue(powerOfTwo[i]);
        else if (mu == 1)
            lineEi.SetValue(invertTan[i]);

        UpdateUI();
    }

    private void UpdateUI()
    {
        if(mu == -1)
            text.text = "ei = tanh^-1(2^-i)";
        else if (mu == 0)
            text.text = "ei = (2^-i)";
        else if (mu == 1)
            text.text = "ei = tanh(2^-i)";
    }

    readonly double[] invertTanh = new double[18] 
    {
        double.MaxValue,
        0.54930614433405484569762261846126285232374527891138, // 0 InvertTanh(0.5)
        0.25541281188299534160275704815183096743905539822288, // 1 InvertTanh(0.25)
        0.12565721414045303884256886520093583982894819303182, // 2
        0.062581571477003007126765023862206595707555550247239, // 3
        0.031260178490666994764012245172648897009629240639787, // 4
        0.015626271752052211379201778751637552699401726900682, // 5
        0.0078126589515404209103234712760401726663588093891096, // 6
        0.0039062698683968260531275633697077859267149521549664, // 7
        0.0019531274835325499986507708868541753190066801569592, // 8
        9.7656281044103584096445002988532625423841784778924E-4, // 9
        4.8828128880511282676100662627116041688922770820693E-4, // 10
        2.4414062985063858292797225210244367126381617295385E-4, // 11
        1.2207031310632980660296307873708937659504886859762E-4, // 12
        6.1035156325791225317150609727890984454395131932483E-5, // 13
        3.0517578134473903148761958402142734492506328147835E-5, // 14
        1.5258789063684237893098936432323325932529290121332E-5, // 15
        7.6293945313980297366218574175518222595851681526615E-6, // 16
    };

    readonly double[] invertTan = new double[17]
    {
        0.78539816339744830961566084581987572104929234984378, // 0
        0.46364760900080611621425623146121440202853705428612, // 1
        0.24497866312686415417208248121127581091414409838118, // 2
        0.1243549945467614350313548491638710255731701917698, // 3
        0.062418809995957348473979112985505113606273887797499, // 4
        0.0312398334302682762537117448924909770324956637254, // 5
        0.015623728620476830802801521256570318911114139800905, // 6
        0.0078123410601011112964633918421992816212228117250147, // 7
        0.0039062301319669718276286653114243871403574901152029, // 8
        0.0019531225164788186851214826250767139316107467772335, // 9
        9.7656218955931943040343019971729085163419701581009E-4, // 10
        4.88281211194898275469239625644848666192361133135E-4, // 11
        2.4414062014936176401672294325965998621241779097062E-4, // 12
        1.2207031189367020423905864611795630093082940901579E-4, // 13
        6.1035156174208775021662569173829153785143536833346E-5, // 14
        3.0517578115526096861825953438536019750949675119438E-5, // 15
        1.5258789061315762107231935812697885137429238144576E-5, // 16
    };

    readonly double[] powerOfTwo = new double[17]
    {
        1, // 0
        0.5, // 1
        0.25, // 2
        0.125, // 3
        0.0625, // 4
        0.03125, // 5
        0.015625, // 6
        0.0078125, // 7
        0.00390625, // 8
        0.001953125, // 9
        0.0009765625, // 10
        0.00048828125, // 11
        0.000244140625, // 12
        0.0001220703125, // 13
        0.00006103515625, // 14
        0.000030517578125, // 15
        0.0000152587890625, // 16
    };
}
